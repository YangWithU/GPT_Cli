// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StringService_SendString_FullMethodName    = "/StringService/SendString"
	StringService_ReceiveString_FullMethodName = "/StringService/ReceiveString"
)

// StringServiceClient is the client API for StringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StringServiceClient interface {
	// Python sends a string to Go
	SendString(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Go sends a processed string to another Python client
	ReceiveString(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StringMessage, error)
}

type stringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStringServiceClient(cc grpc.ClientConnInterface) StringServiceClient {
	return &stringServiceClient{cc}
}

func (c *stringServiceClient) SendString(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, StringService_SendString_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringServiceClient) ReceiveString(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StringMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, StringService_ReceiveString_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StringServiceServer is the server API for StringService service.
// All implementations must embed UnimplementedStringServiceServer
// for forward compatibility.
type StringServiceServer interface {
	// Python sends a string to Go
	SendString(context.Context, *StringMessage) (*EmptyMessage, error)
	// Go sends a processed string to another Python client
	ReceiveString(context.Context, *EmptyMessage) (*StringMessage, error)
	mustEmbedUnimplementedStringServiceServer()
}

// UnimplementedStringServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStringServiceServer struct{}

func (UnimplementedStringServiceServer) SendString(context.Context, *StringMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendString not implemented")
}
func (UnimplementedStringServiceServer) ReceiveString(context.Context, *EmptyMessage) (*StringMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveString not implemented")
}
func (UnimplementedStringServiceServer) mustEmbedUnimplementedStringServiceServer() {}
func (UnimplementedStringServiceServer) testEmbeddedByValue()                       {}

// UnsafeStringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StringServiceServer will
// result in compilation errors.
type UnsafeStringServiceServer interface {
	mustEmbedUnimplementedStringServiceServer()
}

func RegisterStringServiceServer(s grpc.ServiceRegistrar, srv StringServiceServer) {
	// If the following call pancis, it indicates UnimplementedStringServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StringService_ServiceDesc, srv)
}

func _StringService_SendString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringServiceServer).SendString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StringService_SendString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringServiceServer).SendString(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringService_ReceiveString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringServiceServer).ReceiveString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StringService_ReceiveString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringServiceServer).ReceiveString(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// StringService_ServiceDesc is the grpc.ServiceDesc for StringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StringService",
	HandlerType: (*StringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendString",
			Handler:    _StringService_SendString_Handler,
		},
		{
			MethodName: "ReceiveString",
			Handler:    _StringService_ReceiveString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
